<?xml version="1.0" encoding="UTF-8"?>
<CDADescriptor>
   <DataSources>
      <Connection id="dummy" type="sql.jndi">
         <Jndi/>
      </Connection>
      <Connection id="qryChangePassDS" type="scripting.scripting">
         <Initscript/>
         <Language>beanshell</Language>
      </Connection>
   </DataSources>
   <DataAccess access="public" connection="dummy" id="dummy" type="sql">
      <Name>dummy</Name>
      <Cache duration="3600" enabled="true"/>
      <Columns/>
      <Parameters/>
      <Query/>
   </DataAccess>
   <DataAccess access="public" connection="qryChangePassDS" id="qryChangePassDS"
               type="scriptable">
      <Name>qryChangePassDS</Name>
      <Cache duration="3600" enabled="false"/>
      <Columns/>
      <Parameters>
         <Parameter default="" name="newpass" type="String"/>
         <Parameter default="" name="verifypass" type="String"/>
         <Parameter access="private" default="${[security:principalName]}" name="user"
                    type="String"/>
      </Parameters>
      <Query><![CDATA[import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;
import org.json.simple.JSONObject;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import java.io.File;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;


String newpass = dataRow.get("newpass");
String verifypass = dataRow.get("verifypass");
String user = dataRow.get("user");

String msg = "-";
String code = "error";

/***********************************************
** Defines component return table
***********************************************/

String[] columnNames = new String[2];
columnNames[0] = "Message";
columnNames[1] = "Return Code";

Class[] columnTypes = new Class[2];
columnTypes[0] = String.class;
columnTypes[1] = String.class;

TypedTableModel model = new TypedTableModel(columnNames, columnTypes);

/***********************************************
** Validate password
***********************************************/

if (newpass.length() == 0) {
    msg = "Password can not be null.";
} else if (newpass.length() < 8) { 
    msg = "Password can not be less than 8 characters.";
} else if (!newpass.equals(verifypass)) {
    msg = "New Password and Verify Password are different.";
} else {

    /***********************************************
    ** user / password to connect to Pentaho
    ***********************************************/
    
    File xmlCfgFile = new File(PentahoSystem.getApplicationContext().getSolutionPath("system" + File.separator + "changePassword" + File.separator) + "cpp.xml");
    
    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    Document doc = dBuilder.parse(xmlCfgFile);
    
    String authUser = doc.getElementsByTagName("user").item(0).getTextContent();
    String authPass = doc.getElementsByTagName("password").item(0).getTextContent();
    
    /***********************************************
    ** Change password
    ***********************************************/
    
    String mediaType = "application/json;charset=UTF-8";
    String baseUrl = PentahoSystem.getApplicationContext().getFullyQualifiedServerURL() + "api/userroledao/updatePassword";
        	
    ClientConfig config = new DefaultClientConfig();
    Client jerseyClient = Client.create(config);
    jerseyClient.addFilter(new LoggingFilter());
	jerseyClient.addFilter(new HTTPBasicAuthFilter(authUser, authPass));

    		
    JSONObject inputJsonObj = new JSONObject();
    /*inputJsonObj.put("administratorPassword","password");*/
    //inputJsonObj.put("administratorPassword",authPass);
    inputJsonObj.put("userName", user);
    inputJsonObj.put("password", newpass);
    		
    ClientResponse response = jerseyClient.resource(baseUrl).type(mediaType).put(ClientResponse.class, inputJsonObj.toJSONString());	
    		
    if (response.getClientResponseStatus() == ClientResponse.Status.OK) {
        code = "success";
        msg = "Password changed.";
    } else {
        msg = response.getClientResponseStatus().toString();
    }
   
}

model.addRow(new Object[]{ new String(msg), new String(code) });
return model;]]></Query>
   </DataAccess>
</CDADescriptor>